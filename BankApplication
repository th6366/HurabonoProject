import java.util.Scanner;

public class BankApplication {
	private static Account[] accountArray = new Account[100]; 
	private static Scanner scanner = new Scanner(System.in);
	
	public static void main(String[] args) {
		boolean run = true;
		while(run) {
			System.out.println("------------------------------------------");
			System.out.println("1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료");
			System.out.println("------------------------------------------");
			System.out.println("선택 > ");
			
			int selectNo = scanner.nextInt(); //선택하다.
			switch(selectNo) {
			case 1:
				createAccount(); break;
			case 2:
				accountList(); break;
			case 3:
				deposit(); break;
			case 4:
				withdraw(); break;
			case 5:
				run = false;
			}
		}
		System.out.println("프로그램 종료");		
	}//Main()메소드 종료.
	
	//계좌생성하기.
	private static void createAccount() {
		scanner.nextLine();
		System.out.println("-------");
		System.out.println("계좌 목록");
		System.out.println("-------");
		
		System.out.println("계좌번호 : ");
		String ano = scanner.nextLine();		
		for(int j=0; accountArray[j] != null; j++) {
			if(accountArray[j].getAno().equals(ano)) {
				System.out.println("동일한 계좌가 있어 생성이 불가합니다.");
				return;
			}
		}
		
		System.out.println("계좌주 : ");
		String owner = scanner.nextLine();
		System.out.println("초기입금액 : ");
		int balance = scanner.nextInt();
		
		for(int i=0; i<accountArray.length; i++) {
			if(accountArray[i] == null) {
				accountArray[i] = new Account(ano, owner, balance);
				System.out.println("계좌가 생성되었습니다.");
				break;
			}
		}
	}
	
	//계좌목록보기.
	private static void accountList() {
		System.out.println("-------");
		System.out.println("계좌 목록");
		System.out.println("-------");
		
		int i = 0;
		while(accountArray[i] != null) {
			System.out.println(accountArray[i].getAno() + "	" + accountArray[i].getOwner() + "	" + accountArray[i].getBalance());
			i++;
		}
	}
	
	//예금하기.
	private static void deposit() {
		scanner.nextLine();
		System.out.println("-------");
		System.out.println("예    금");
		System.out.println("-------");
		
		System.out.println("계좌번호 : ");
		String ano = scanner.nextLine();
		Account account = findAccount(ano);
		if(account == null) {
			System.out.println("입력하신 계좌가 없습니다.");
		} else {
			System.out.println("예금액 : ");
			int balance = scanner.nextInt();
			account.setBalance(account.getBalance() + balance); 
			System.out.println("예금이 성공되었습니다.");
		}
	}
	
	//출금하기.
	private static void withdraw() {
		scanner.nextLine();
		System.out.println("-------");
		System.out.println("출    금");
		System.out.println("-------");
		
		System.out.println("계좌번호 : ");
		String ano = scanner.nextLine();
		Account account = findAccount(ano);
		if(account == null) {
			System.out.println("입력하신 계좌가 없습니다.");
		} else {
			System.out.println("출금액 : ");
			int balance = scanner.nextInt();
			
			if(balance > account.getBalance()) {
				System.out.println("출금이 실패하였습니다. 통장 잔액 : " + account.getBalance());
			} else {
				account.setBalance(account.getBalance() - balance);
				System.out.println("출금이 성공되었습니다. 통장 잔액 : " + account.getBalance());
			}
		}
	}
	
	//Account 배열에서 ano와 동일한 Account 객체 찾기.
	private static Account findAccount(String ano) {
		int i = 0;
		while(accountArray[i] != null) {
			if(accountArray[i].getAno().equals(ano)) {
				return accountArray[i];
			} 
			i++;
		}
		return null;
	}
}

public class Account { 
	private String ano; //계좌번호. 
	private String owner; //계좌주.
	private int balance; //입금액.
	
	public Account(String ano, String owner, int balance) {
		this.ano = ano;
		this.owner = owner;
		this.balance = balance;
	}
	
	public String getAno() {
		return ano;
	}

	public void setAno(String ano) {
		this.ano = ano;
	}

	public String getOwner() {
		return owner;
	}

	public void setOwner(String owner) {
		this.owner = owner;
	}

	public int getBalance() {
		return balance;
	}

	public void setBalance(int balance) {
		this.balance = balance;
	}
		
}
