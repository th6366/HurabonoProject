package game;import java.awt.Color;import java.awt.Graphics;import java.awt.Label;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;class MyLabel extends JLabel {    static int barSize=0;//시작 에너지 크기    static int maxBarSize;    static int num=0;//0일때 왼쪽 방향키, 1일때 오른쪽 방향키        MyLabel(int maxBarSize){        this.maxBarSize=maxBarSize;    }        public void paintComponent(Graphics g) {        super.paintComponent(g);        g.setColor(Color.red);        int width =(int)(((double)(this.getWidth()))/maxBarSize*barSize);        if(width==0) return;//크기가 0이면 바를 그릴 필요 없음        g.fillRect(0,0,width,this.getHeight());    }        synchronized void fill() {        if(barSize==maxBarSize){            try{             JOptionPane.showMessageDialog(null, "Success");             System.exit(0);            }            catch(Exception e){                return;            }        }        barSize++;        if(num == 1) {         num = 0;        } else if(num == 0) {         num = 1;        }        this.repaint();//바 다시그리기        this.notify();//기다리는 ConsumerThread 스레드 깨우기    }        synchronized void consume() {        if(barSize==0){            try{                this.wait();//바의 크기가 0이면 바의 크기가 0보다 커질때까지 대기            }            catch(Exception e){                return;            }        }        if(TimeThread.time < 0) {         try {    wait();   } catch (InterruptedException e) {    // TODO Auto-generated catch block    e.printStackTrace();   }        }        barSize--;        this.repaint();//바 다시 그리기        this.notify();//기다리는 이벤트 스레드 깨우기    }}class ConsumerThread extends Thread {    MyLabel con;    ConsumerThread(MyLabel con){        this.con=con;    }    public void run(){        while(true){            try{                sleep(300);                con.consume();//0.3초마다 바를 1씩 줄인다.            }            catch(Exception e){                return;            }        }    }}class TimeThread extends Thread { static int time = 5;     public void run(){        while(true){         try {       Thread.sleep(1000);       time--;      } catch (InterruptedException e) {       // TODO Auto-generated catch block       e.printStackTrace();      }                  if(MyLabel.barSize == MyLabel.maxBarSize) {       try {     wait();    } catch (InterruptedException e) {     // TODO Auto-generated catch block     e.printStackTrace();    }      }                  if(time < 0) {          JOptionPane.showMessageDialog(null, "Fail");             System.exit(0);         }        }    }}class TabAndThreadEx extends JFrame {    protected static final int VK_LEFT = 0; MyLabel bar = new MyLabel(70);//바의 크기(최대치)     TabAndThreadEx(){        this.setTitle("에너지 바 채우기");        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        this.setLayout(null);        Label namelabel = new Label("아이디 : ", Label.RIGHT);                bar.setBackground(Color.gray);        bar.setOpaque(true);        bar.setLocation(88, 150); //에너지 bar 위치        bar.setSize(500,70); //에너지 bar 크기        this.add(bar);        //키 리스너 등록        this.addKeyListener(new KeyListener(){         @Override            public void keyTyped(KeyEvent key) {            }            @Override            public void keyPressed(KeyEvent key) {             int keyEvent=key.getKeyCode();                          if(keyEvent == KeyEvent.VK_LEFT && MyLabel.num == 1) {              bar.fill();//키를 누를때마다 바가 1씩 증가             } else if(keyEvent == KeyEvent.VK_RIGHT && MyLabel.num == 0) {              bar.fill();//키를 누를때마다 바가 1씩 증가             }            }            @Override            public void keyReleased(KeyEvent key) {            }                    });        this.setLocationRelativeTo(null);        this.setSize(700,500);        this.setVisible(true);        this.requestFocus();//키 처리권 부여        ConsumerThread consumerThread = new ConsumerThread(bar);//스레드 생성        consumerThread.start();//스레드 시작        TimeThread timeThread = new TimeThread();//스레드 생성        timeThread.start(); //스레드 시작    }}public class FillEnergy {    public static void main(String[] args) {        new TabAndThreadEx();    }}
