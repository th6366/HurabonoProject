프로그램 목표 :
복소수의 실수부분과 허수부분으로 만든 벡터를 이용하여 한 계산식의 수렴값을 구합니다. 
A = a+bi , B = c+di로 할경우
계산식 = (||A||^2+||B||^2) - (||A*B||^2 + ||A/B||^2)
위 계산식의 결과를 구하고 다시
A = A*B 
B = A/B 로 설정하여 위의 계산식을 10회 반복하여 그동안 수렴을 축정합니다.
 
구현방법:
1. 랜덤넘버 제너레이터로 복소수 2개 생성합니다. (A+Bi, C+Di) 단, A,B,C,D의 크기는 -10이상 10이하로 설정
2. 복소수를 A+Bi 라고 할 시 이 값을 이용하여 벡터 <A,B>를 설정합니다.
3. 두개의 복소수의 곱한 값과 나눈 값을 구하고 이 값으로 2개의 벡터를 설정합니다.
4. 두 벡터의 크기의 합을 구하고 
5. 곱한 값과 나눈 값을 다시 2개의 복소수 (A+Bi, C+Di) 로 설정하여 3번으로 되돌아갑니다.
6. 만약 두 벡터의 크기의 합의 차이가 내가 설정한 값 이하로 세번이상 나올 경우 반복을 정지합니다.
7. 1번부터 6번과정을 총 10번 반복합니다.
*/
 
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
 
typedef struct ComplexNumber
{
    double a; //실수 부분
    double b; //허수 부분
}CoNum;
 
CoNum multiplex(CoNum A, CoNum B); // 두 복소수의 곱한 결과를 반환
CoNum divide(CoNum A, CoNum B); // 두 복소수의 나눈 결과를 반환
double sum(CoNum A, CoNum B);// 두 복소수로 만들어진 벡터 크기의 합을 반환
 
int main()
{
    CoNum A, B;
    CoNum C, D;
    int i = 0;
    int j = 0;
    double dif = 0; // (두 벡터 크기의 합) - (다른 두 벡터 크기의 합)
    double mydif = 100; // 내가 설정한 차이 값
    double inner = 0; //내가 설정한 값 이하에 수렴한 횟수
    srand((int)time(NULL)); // 현재 시간을 이용해서 씨드 설정
    while(i<10)
    {   
        printf("%d 번째 루프\n", i+1);
        A.a = rand()%10; // 10이하의 임의의 값을 입력받음
        A.b = rand()%10; // 10이하의 임의의 값을 입력받음
        B.a = rand()%10; // 10이하의 임의의 값을 입력받음
        B.b = rand()%10; // 10이하의 임의의 값을 입력받음
         
        if(rand()%2==1)
            A.a *= -1; // 임의로 음수설정
        if(rand()%2==1)
            A.b *= -1; // 임의로 음수설정
        if(rand()%2==1)
            B.a *= -1; // 임의로 음수설정
        if(rand()%2==1)
            B.b *= -1; // 임의로 음수설정
 
        for(j=0; j<10; j++)
        {
            C = multiplex(A,B); // C = A*B
            D = divide(A,B);    // D = A/B
            dif = sum(A,B) - sum(C,D);
 
            if(dif<0)
                dif *= -1; // 절대값으로 변경
 
            printf("%d번째 차이 값 : %g \n" , j+1, dif);
            if(dif<=mydif) // 내가 설정한 이하로 값이 수렴하면
                inner++; // 반복횟수 1 증가
            else
                inner = 0; //그렇지 않을 경우 다시 0으로 초기화
            if(inner==3) // 3번이상 수렴시 루프 탈출
                break;
            A = C;
            B = D;
        }
        i++;
    }
    return 0;
}
 
CoNum multiplex(CoNum A, CoNum B) // 두 복소수의 곱한 결과를 반환
{   
    CoNum mul1; // 곱한 결과 값
    mul1.a = A.a*B.a - A.b*B.b;
    mul1.b = A.a*B.b + A.b*B.a;
    return mul1;
}
CoNum divide(CoNum A, CoNum B) // 두 복소수의 나눈 결과를 반환
{
    CoNum div1; // 나눈 결과 값
    CoNum PairB; // 켤레복소수
    PairB.a = B.a;
    PairB.b = -B.b;
    div1 = multiplex(A,PairB); // (a+bi)*(c-di)
    div1.a /= B.a*B.a+B.b*B.b; // 실수부분 / (c+di)*(c-di)
    div1.b /= B.a*B.a+B.b*B.b; // 허수부분 / (c+di)*(c-di)
    return div1;
}
 
double sum(CoNum A, CoNum B)// 두 복소수로 만들어진 벡터 크기의 합을 반환
{
    double a, b;
    a = A.a*A.a+A.b*A.b; // a^2+b^2
    b = B.a*B.a+B.b*B.b; // c^2+d^2
    return a+b; 
}
