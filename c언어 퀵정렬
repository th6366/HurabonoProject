#include <stdio.h> void PrintArray(int arrData[], int Length){    for (int i = 0; i < Length; i++)        printf("%d ", arrData[i]);    printf("\n");} int Partition(int numbers[], int left, int right){    int first = left;    // 정렬 대상의 첫 번째 요소가 바로 기준값을 의미한다.    int pivot = numbers[first];    int temp = 0;     ++left;    // left가 right보다 크다면 루프를 빠져나오게 되어있다.    while (left <= right)    {        // 배열을 순회하여 기준값(pivot)보다 크거나 같은 데이터를 찾을때까지 탐색하며 left의 값을 증가시킨다.        while(numbers[left] <= pivot && left < right) ++left;        // 배열을 순회하여 기준값(pivot)보다 작은 데이터를 찾을때까지 탐색하며 right의 값을 증가시킨다.        while(numbers[right] > pivot && left <= right) --right;         // right가 left보다 클 경우에(만나지 못했을 경우에)        if (left < right)        {            // 두 값을 교환한다.            temp = numbers[left];            numbers[left] = numbers[right];            numbers[right] = temp;        }        else break;    }     temp = numbers[first];    numbers[first] = numbers[right];    numbers[right] = temp;     return right;} void QuickSort(int numbers[], int left, int right){    if (left < right)    {        int index = Partition(numbers, left, right);         QuickSort(numbers, left, index - 1);        QuickSort(numbers, index + 1, right);    }} int main(){    int arrData[] = {5, 4, 1, 2, 8, 7, 9};    int Length = sizeof arrData / sizeof arrData[0];     PrintArray(arrData, Length);    QuickSort(arrData, 0, Length - 1);    PrintArray(arrData, Length);     return 0;}
