#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#if 1

struct account
{
 char name[20];
 char accID[16];
 int balance;
};

typedef struct account Account;

Account *bank[100];  //각 배열 인덱스공간에 주소가 추가되어야함
int cnt=0;

void AddAcc();
void ShowAllAcc();
void SearchAcc();
void SortByName();
void Doposit();
void Withdraw();
void DeleteAcc();

int main()
{
 
 int i, select;
 
  
 while(1)
 {
 printf("1. 계좌 추가\n");   //AddAcc()-> 이름, 계좌번호, 초기비용, bank배열에 채운다
 printf("2. 전체 출력\n");  //ShowAllAcc()  -> cnt변수를 이용하여 전체 계좌출력
 printf("3. 계좌 검색\n");   //SearchAcc()  -> cnt변수 이용하고, 이름으로 검색하여 해당 계좌만 출력
 printf("4. 이름으로 정렬\n"); //SortByName()  -> 이름으로 오름차순 정렬
 printf("5. 입금\n");   //Doposit()  -> 계좌번호를 검색 해당 계좌에 입금, -금액은 입금 불가
 printf("6. 출금\n");   //Withdraw()  -> 계좌번호를 검색 해당 계좌에서 출금 -금액 출금 불가, 잔고보다 많은 금액은 출금 불가
 printf("7. 삭제\n");    //DeleteAcc() -> 이름으로 검색해서 해당 계좌 삭제, 배열의 삭제 원리 이해, cnt변수 값 변화
 printf("0. 종료\n");
 printf(">> 선택 : ");
 scanf("%d", &select);
 getchar();
 switch(select)
 {
 case 1:  
  AddAcc();
  break;
 case 2:
  ShowAllAcc();
  getchar();
  break;
 case 3: 
  SearchAcc();
  getchar();
  break;
 case 4:
  SortByName();
  getchar();
  break;
 case 5: 
  Doposit();
  getchar();
  break;
 case 6:
  Withdraw();
  getchar();
  break;
 case 7:
  DeleteAcc();
  getchar();
  break;
 case 0:
  printf("프로그램 종료\n");
  return 0;
  break;
 }
 system("cls");
 
 }
  
 
 return 0;
}

void AddAcc()
{
 bank[cnt] = (Account *)malloc(sizeof(Account));
 
 printf("예금주 : ");
 gets(bank[cnt]->name);
 printf("계좌번호 : ");
 gets(bank[cnt]->accID);
 printf("초기 비용 :");
 scanf("%d", &bank[cnt]->balance);

 printf("계좌개설 완료\n");
 cnt++;
}

void ShowAllAcc()
{
 int i;
    printf("\n----------------------------\n");
 for(i=0;i<cnt;i++)
 {
  printf("예 금 주 : %s\n", bank[i]->name);
  printf("계좌번호 : %s\n", bank[i]->accID);
  printf("현재잔고 : %d\n", bank[i]->balance);
  printf("----------------------------\n");
 }
}

void SearchAcc()
{
 int i, search_cnt=0;
 char tmp[20];
 
 printf("검색하고자 하는 예금주 : ");
 gets(tmp);
    printf("\n--------검색결과------------\n");
 for(i=0;i<cnt;i++)
 {
  if(strcmp(bank[i]->name, tmp) ==0)
  {
  printf("예 금 주 : %s\n", bank[i]->name);
  printf("계좌번호 : %s\n", bank[i]->accID);
  printf("현재잔고 : %d\n", bank[i]->balance);
  printf("----------------------------\n");
  search_cnt++;

  }
 }
 if(search_cnt==0)
  printf("해당 계좌가 존재하지 않습니다.\n");
 else
  printf("%s 예금주는 총 %d명 존재합니다. \n", tmp, search_cnt);

}

void SortByName()
{
 int i,j,k;
 Account *tmp;
 //버블정렬
 for(i=0; i<cnt-1;i++)
 {
  for(j=0; j<(cnt-1)-i;j++)
  {
   if(strcmp(bank[j]->name,bank[j+1]->name) > 0)
   {
    tmp = bank[j];
    bank[j] = bank[j+1];
    bank[j+1] =tmp;
   }
  }

  for(k=0; k<cnt; k++)
   printf("%s ", bank[k]->name);
   printf("\n");
 }


}

void Doposit()
{
 int i, search_cnt=0,money;
 char tmp[20];
 
 printf("입금하고자 계좌 입력 : ");
 gets(tmp);
    printf("\n--------검색결과------------\n");
 for(i=0;i<cnt;i++)
 {
  if(strcmp(bank[i]->accID, tmp) ==0)
  {
  printf("예 금 주 : %s\n", bank[i]->name);
  printf("계좌번호 : %s\n", bank[i]->accID);
  printf("현재잔고 : %d\n", bank[i]->balance);
  printf("----------------------------\n");
  
   printf("입금 금액 : ");
   scanf("%d", &money);
   getchar();
   if(money >= 0)
   {
    bank[i]->balance = bank[i]->balance + money;
    search_cnt++;
   }
   else
    printf("유효하지 않는 금액을 입금하셨습니다. \n");
  
  }
 }
 if(search_cnt==0)
  printf("해당 계좌가 존재하지 않습니다.\n");
 else
  printf("[%s]계좌에 %d원이 입금되었습니다. \n", tmp, money);

}

void Withdraw()
{
 int i, search_cnt=0,money;
 char tmp[20];
 
 printf("출금하고자 계좌 입력 : ");
 gets(tmp);
    printf("\n--------검색결과------------\n");
 for(i=0;i<cnt;i++)
 {
  if(strcmp(bank[i]->accID, tmp) ==0)
  {
  printf("예 금 주 : %s\n", bank[i]->name);
  printf("계좌번호 : %s\n", bank[i]->accID);
  printf("현재잔고 : %d\n", bank[i]->balance);
  printf("----------------------------\n");
  
   printf("출금 금액 : ");
   scanf("%d", &money);
   getchar();
   if(money > bank[i]->balance)
   {
    printf("잔고 부족\n");
   }else if(money < 0)
   {
    printf("유효하지 않는 금액을 출금하셨습니다. \n");
   } else
   {
    bank[i]->balance = bank[i]->balance - money;
    search_cnt++;
   }
    
  }
 }
 if(search_cnt==0)
  printf("해당 계좌가 존재하지 않습니다.\n");
 else
  printf("[%s]계좌에서 %d원이 출금되었습니다. \n", tmp, money);


}

void DeleteAcc()
{
 int i,j, search_cnt=0,money;
 char tmp[20];
 
 printf("삭제하고자 계좌 입력 : ");
 gets(tmp);
    printf("\n--------결과------------\n");
 for(i=0;i<cnt;i++)
 {
  if(strcmp(bank[i]->accID, tmp) ==0)
  {
   for(j=i;j<cnt-1;j++)
   {
    bank[j]=bank[j+1];
   }
   printf("삭제 완료\n");
  }
 }
 cnt--;
}
#endif
