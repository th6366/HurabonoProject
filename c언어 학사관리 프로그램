#include <stdio.h>#include <stdlib.h>struct data{ int korean;//국어 int english;//영어 int math;//수학 int id;//학번 char name[10];//이름 double mark;//평점 char grade;//학점};typedef struct linked_list{ struct data d; struct linked_list *L_link; struct linked_list *R_link;}linked_list;void input(linked_list **header_node);//학생 데이터 입력 함수void inquiry(linked_list **header_node);//학생 데이터 조회 함수void remove_node(linked_list **header_node);//학생 데이터 삭제 함수void copy_node(linked_list **temp, linked_list **copy_header_node);void main(){ int menu; linked_list *header_node = (linked_list*)malloc(sizeof(linked_list));//노드 메모리 공간 생성 header_node->L_link = header_node; header_node->R_link = header_node; while (1) {  system("cls");  printf("====================================\n\n");  printf("         *학사 정보 시스템*\n\n");  printf("                             by.KCH\n");  printf("====================================\n\n\n\n");  printf("1.학생정보 조회 \n\n");  printf("2.학생정보 입력 \n\n");  printf("3.학생정보 삭제 \n\n");  printf("4.프로그램 종료 \n\n\n");  printf("*메뉴를 선택하세요 : ");  scanf("%d", &menu);  switch (menu)  {  case 1:   inquiry(&header_node);//학생정보 조회   break;  case 2:   input(&header_node);//학생정보 입력   break;  case 3:   remove_node(&header_node);//학생정보 삭제   break;  case 4:   system("cls");   printf("=========================\n");   printf("프로그램을 종료합니다.\n\n");   printf("이용해주셔서 감사합니다.\n\n\n");   printf("\t   made by. KCH\n");   printf("=========================\n");   return 0;   break;  default:   printf("잘못 입력했다!!");  } }}void input(linked_list **header_node)//학생정보 입력{ linked_list *node = (linked_list*)malloc(sizeof(linked_list));//노드 메모리 공간 생성 linked_list *temp; int error;//입력에러확인변수 char confirmation;//입력확인유무 변수 system("cls"); printf("============================\n"); printf("      *학생 정보 입력*     \n"); printf("============================\n\n\n"); error = 0;//오류입력시 함수 탈출을 위한 조건변수 while (1) {  printf("저장하실 학생의 학번을 입력하세요 : ");  scanf("%d", &node->d.id);  fflush(stdin);  if (node->d.id<1987000000 || node->d.id>2008000000)  {   printf("\n입력범위를 초과하셨습니다(입력범위 : 학번 10자리)\n");   printf("3회이상 오류시 입력이 취소됩니다(%d번째)\n\n", error + 1);   node->d.id = 0;   error++;  }  else   break; } printf("\n저장하실 학생의 이름을 입력하세요 : "); scanf("%s", &node->d.name); fflush(stdin); printf("\n"); printf("저장하실 학생의 성적을 입력하세요!\n\n");//각 성적 입력 error = 0; while (1) {  printf("국어 : ");  scanf("%d", &node->d.korean);  fflush(stdin);  if (node->d.korean<0 || node->d.korean>100)  {   printf("\n입력범위를 초과하셨습니다(입력범위 : 0~100)\n\n");   printf("3회이상 오류시 입력이 취소됩니다(%d번째)\n\n", error + 1);   node->d.korean = 0;   error++;  }  else   break;  if (error == 3)  {   printf("\n*3회이상 입력오류로 인해 입력이 취소되었습니다*");   printf("\n\n*전 화면으로 돌아가길 원하시면 ENTER 를 눌러주세요*");   fgetchar();   fflush(stdin);   return 0;  } } error = 0; while (1) {  printf("영어 : ");  scanf("%d", &node->d.english);  fflush(stdin);  if (node->d.english<0 || node->d.english>100)  {   printf("\n입력범위를 초과하셨습니다(입력범위 : 0~100)\n\n");   printf("3회이상 오류시 입력이 취소됩니다(%d번째)\n\n", error + 1);   node->d.english = 0;   error++;  }  else   break;  if (error == 3)  {   printf("\n*3회이상 입력오류로 인해 입력이 취소되었습니다*");   printf("\n\n*전 화면으로 돌아가길 원하시면 ENTER 를 눌러주세요*");   fgetchar();   fflush(stdin);   return 0;  } } error = 0; while (1) {  printf("수학 : ");  scanf("%d", &node->d.math);  fflush(stdin);  if (node->d.math<0 || node->d.math>100)  {   printf("\n입력범위를 초과하셨습니다(입력범위 : 0~100)\n\n");   printf("3회이상 오류시 입력이 취소됩니다(%d번째)\n\n", error + 1);   node->d.math = 0;   error++;  }  else   break;  if (error == 3)  {   printf("\n*3회이상 입력오류로 인해 입력이 취소되었습니다*");   printf("\n\n*전 화면으로 돌아가길 원하시면 ENTER 를 눌러주세요*");   fgetchar();   fflush(stdin);   return 0;  } } system("cls"); node->d.mark = (double)(node->d.korean + node->d.english + node->d.math) / 3;//입력성적의 총점 if (node->d.mark >= 90)  node->d.grade = 'A'; else if (node->d.mark<90 && node->d.mark >= 80)  node->d.grade = 'B'; else if (node->d.mark<80 && node->d.mark >= 70)  node->d.grade = 'C'; else if (node->d.mark<70 && node->d.mark >= 60)  node->d.grade = 'D'; else  node->d.grade = 'F'; printf("============================\n"); printf("        *입력 결과*     \n"); printf("============================\n\n\n"); printf("학번 : %d \n\n", node->d.id);//입력 확인사항 출력 printf("이름 : %s \n\n", node->d.name); printf("성적 - \n\n"); printf("국어 : %d \n", node->d.korean); printf("영어 : %d \n", node->d.english); printf("수학 : %d \n\n", node->d.math); printf("평점 : %lf\n", node->d.mark); printf("학점 : %c\n\n", node->d.grade); printf("입력하신 학생의 데이터입니다.\n"); printf("맞으시면 (Y), 틀리시면 (N) 를 눌러주세요 :"); scanf("%c", &confirmation); switch (confirmation) { case 'y':  temp = *header_node;  if (temp->R_link == *header_node)  {   node->L_link = temp;   node->R_link = *header_node;   temp->R_link = node;   (*header_node)->L_link = node;  }  else  {   for (; temp->R_link != *header_node; temp = temp->R_link);   node->L_link = temp;   node->R_link = *header_node;   temp->R_link = node;   (*header_node)->L_link = node;  }  break; case 'n':  return 0; default:  printf("잘못 입력했다."); }}void inquiry(linked_list **header_node)//학생정보 조회{ linked_list *temp; linked_list *copy_header_node = (linked_list*)malloc(sizeof(linked_list)); int sort; linked_list comparison; linked_list *sort_temp; copy_header_node->L_link = copy_header_node; copy_header_node->R_link = copy_header_node; system("cls"); if ((*header_node)->R_link == *header_node) {  printf("\n*현재 입력된 데이터가 없습니다*\n\n");  printf("\n\n*전 화면으로 돌아가길 원하시면 ENTER 를 눌러주세요*");  fflush(stdin);  fgetchar();  return 0; } else {  temp = *header_node;  for (; temp->R_link != *header_node; temp = temp->R_link)  {   copy_node(&temp, &copy_header_node);  }  printf("1.오름차순정렬\n\n");  printf("2.내림차순정렬\n\n\n");  printf("정렬방법을 선택하세요 : ");  scanf("%d", &sort);  temp = copy_header_node;  for (; temp->R_link != copy_header_node; temp = temp->R_link)  {   sort_temp = temp;   comparison.d.mark = temp->d.mark;   for (; sort_temp->R_link != copy_header_node; sort_temp = sort_temp->R_link)   {    if (comparison.d.mark>sort_temp->d.mark)     comparison.d.mark = sort_temp->d.mark;   }   temp->d.mark = comparison.d.mark;  }  temp = copy_header_node;  system("cls");  printf("*학번 조회 결과*\n\n");  printf("---------------------------------------------------------------------\n");  printf("   학번 \t이름\t국어\t영어\t수학\t평점\t      학점\n");  printf("---------------------------------------------------------------------\n");  switch (sort)  {  case 1:   for (; temp->R_link != copy_header_node; temp = temp->R_link)    printf("%d\t%s\t%d\t%d\t%d\t%lf\t%c\n", temp->R_link->d.id, temp->R_link->d.name, temp->R_link->d.korean, temp->R_link->d.english, temp->R_link->d.math, temp->R_link->d.mark, temp->R_link->d.grade);   break;  case 2:   for (; temp->L_link != copy_header_node; temp = temp->L_link)    printf("%d\t%s\t%d\t%d\t%d\t%lf\t%c\n", temp->L_link->d.id, temp->L_link->d.name, temp->L_link->d.korean, temp->L_link->d.english, temp->L_link->d.math, temp->L_link->d.mark, temp->L_link->d.grade);   break;  default:   printf("잘못입력햇다");  }  printf("---------------------------------------------------------------------\n");  printf("\n\n*전 화면으로 돌아가길 원하시면 ENTER 를 눌러주세요*");  fflush(stdin);  fgetchar(); }}void copy_node(linked_list **temp, linked_list **copy_header_node){ linked_list *copy_node = (linked_list*)malloc(sizeof(linked_list));//카피할 노드 메모리 공간 생성 linked_list *copy_temp;//임시 주소 저장공간 copy_node->d = (*temp)->R_link->d;//복사할 노드에 원본데이터 대입 if ((*copy_header_node)->R_link == *copy_header_node) {  copy_node->L_link = *copy_header_node;  copy_node->R_link = *copy_header_node;  (*copy_header_node)->L_link = copy_node;  (*copy_header_node)->R_link = copy_node; } else {  copy_temp = *copy_header_node;  for (; copy_temp->R_link != *copy_header_node; copy_temp = copy_temp->R_link);  copy_temp->R_link = copy_node;  copy_node->L_link = copy_temp;  copy_node->R_link = *copy_header_node;  (*copy_header_node)->L_link = copy_node; }}void remove_node(linked_list **header_node){ char confirmation;//입력확인유무 변수 linked_list *temp; int remove_id; temp = *header_node; system("cls"); printf("============================\n"); printf("     *학생 정보 삭제*     \n"); printf("============================\n\n\n"); printf("삭제하실 학번입력해주세요 : "); scanf("%d", &remove_id); fflush(stdin); for (; temp->R_link != *header_node; temp = temp->R_link)  if (temp->R_link->d.id == remove_id)   break; printf("%d\t%s\t%d\t%d\t%d\t%lf\t%c\n", temp->R_link->d.id, temp->R_link->d.name, temp->R_link->d.korean, temp->R_link->d.english, temp->R_link->d.math, temp->R_link->d.mark, temp->R_link->d.grade); printf("\n\n\n삭제하길 원하시는 학생의 데이터입니다.\n\n"); printf("삭제를 원하시면 (Y), 취소를 원하시면 (N) 를 눌러주세요 :"); scanf("%c", &confirmation); fflush(stdin); switch (confirmation) { case 'y':  temp->R_link = temp->R_link->R_link;  temp->R_link->R_link->L_link = temp;  free(temp->R_link);  break; case 'n':  return 0;  break; default:  printf("잘못 입력했따!"); }}
