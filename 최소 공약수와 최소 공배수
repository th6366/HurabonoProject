
#최대공약수 구하는 방법
유클리드의 호제법 알고리즘을 이용하였습니다.
두 입력 값 중 큰 값과 작은 값을 구분하여 M과 N으로 지정하였습니다.
재귀 함수를 이용하여
M을 N으로 나눈 나머지가 0이 될 때 까지 N이 가진 값을 M에 지정하고 그 나머지 값을 N에 지정하여 다시 M을 N으로 나누었습니다. 
그리고 나머지가 0이 되면 최대공약수는 M이므로 재귀함수를 종료하였습니다.
유클리드 호제법:
1단계 : 두 입력 값 중 큰 값을 M, 작은 값을 N에 지정한다.
2단계 : M을 N으로 나누고 그 나머지를 R이라고 부른다.
3단계 : R이 0이 아닐 경우, N이 가진 값을 M에 지정하고 R의 값은 N에 지정한 다음 2단계로 돌아간다.
        R이 0일 경우, 현재 N에 지정된 값이 최대공약수이다.
 
#최소공배수 구하는 방법
입력받은 두 값을 곱한 후 최대공약수로 나누어 최소공배수를 구하였습니다.
*/

#include <stdio.h>
int GetGCD(int M, int N); //최대공약수 함수
int GetLCM(int M, int N, int GCD); // 최소 공배수 함수
int main()
{
    int a, b; // 값을 입력받은 변수
    int GCD, LCM;
    printf("2개의 정수 입력: ");
    scanf("%d %d", &a, &b);
 
    /*최대 공약수 구하기 */
    if(a>b) // 유클리드 호제법 1단계 실행
        GCD = GetGCD(a,b); // GetGCD 함수를 통해 유클리드 호제법 2,3 단계 실행
    else
        GCD = GetGCD(b,a);
    printf("G C D : %d\n", GCD); // 최대공약수 출력
 
    /*최소 공배수 구하기*/
    LCM = GetLCM(a,b, GCD);
    printf("L C M : %d\n", LCM); // 최소 공배수 출력
    return 0;
}
 
int GetGCD(int M, int N)
{
    if((M%N)==0) // 나머지가 0 일 경우 N이 최대공약수이다.
        return N;
    else
        return GetGCD(N, M%N); // 나머지가 0이 아닐 경우N이 가진 값을 M에 지정하고 R의 값은 N에 지정한 다음 2단계로 돌아간다.
}
 
int GetLCM(int M, int N, int GCD)
{
    return M*N/GCD; // 두 값을 곱한 후 최대공약수로 나눈다.
}
